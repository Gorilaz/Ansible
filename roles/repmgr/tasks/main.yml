#/etc/ansible/roles/repmgr/tasks/main.yml
- name: Makes repmgr.conf
  template: src=repmgr.conf dest=/etc/repmgr.conf mode=0750 owner={{ postgresql_user }} #group={{ postgresql_group }} 
  when: skip_host is not defined
  
- name: Makes /etc/sudoers.d/{{ postgresql_user }}
  template: src=sudoer_postgres dest=/etc/sudoers.d/{{ postgresql_user }} owner=root group=root
  #tags: [ tested ]

- name: Makes /home/{{ postgresql_user }}/repmgr_handler.sh
  template: src=repmgr_handler.sh dest=/home/{{ postgresql_user }}/repmgr_handler.sh mode=0750 owner={{ postgresql_user }} #group={{ postgresql_group }} 
  when: skip_host is not defined
  
- name: Remove /etc/repmgr/{{postgresql_version | replace('.', '')}}/repmgr.conf
  file: 
    path: "/etc/repmgr/{{postgresql_version | replace('.', '')}}/repmgr.conf"
    state: absent
  #tags: [ tested ]  
#- name: Clear PGDATA on slaves
#  file:
#    state: absent
#    path: "{{ postgresql_pgdata }}/"
#  when: "'pgslave' in group_names"  
#- name: Clear PGDATA on slaves
#  find:
#    paths: "{{ postgresql_pgdata }}/"
#    file_type: any
#    hidden: True
#    recurse: True
#  register: files_to_delete
#  when: "'pgslave' in group_names"
#  tags: [ tested ]

#- name: Clear PGDATA on slaves
#  file:
#    path: "{{ item.path }}"
#    state: absent
#  with_items: "{{ files_to_delete.files }}"
#  when: "'pgslave' in group_names"    
#  tags: [ tested ]
    
#- name: "Wipe clean {{ postgresql_pgdata }} with empty folder hack."
#  synchronize:
#    mode: push
#    #note the backslash here
#    src: "/etc/ansible/roles/postgres/emptydir/" #local dir for ansible server
#    dest: "{{ postgresql_pgdata }}"
#    recursive: yes
#    delete: yes
#  when: "'pgslave' in group_names"
  #tags: [ tested, install ]
  #delegate_to: "{{ inventory_hostname }}"  

- name: Ensure PGDATA exists
  file: path="{{ postgresql_pgdata }}/" owner={{ postgresql_user }} state=directory recurse=yes
  #tags: [ tested ]

- debug:
    msg: sudo -iu {{ postgresql_user }} repmgr -h {{ hostvars[groups['pgmaster'][0]]['ansible_all_ipv4_addresses']|first }} --port={{ postgresql_port }} -U repmgr -d repmgr -D {{ postgresql_pgdata }} -f /etc/repmgr.conf standby clone
  tags: [ tested ]
  #sudo -iu "{{ postgresql_user }}"

- name: Connect to {{ postgresql_user }} database, create repmgr user
  postgresql_user:
    db: "{{ postgresql_user }}"
    name: repmgr
    role_attr_flags: SUPERUSER
    port: "{{ postgresql_port }}"
  when: 
    - "'pgmaster' in group_names"   
    - skip_host is not defined

- name: Create repmgr database
  postgresql_db:
    name: repmgr
    port: "{{ postgresql_port }}"
    owner: repmgr
  when: 
    - "'pgmaster' in group_names"
    - skip_host is not defined

- name: repmgr primary register
  shell: . ~/.bash_profile && repmgr primary register --force
  when: 
    - "'pgmaster' in group_names"
    - skip_host is not defined
  #tags: [ tested ]
  become: yes
  become_user: "{{ postgresql_user }}"

- name: Check if PostgreSQL database is initialized.
  stat:
    path: "{{ postgresql_pgdata }}/PG_VERSION"
  register: pgdata_dir_version
  #when: "'pgmaster' in group_names"
  tags: [ tested, install ]  
  
- name: Clone database from primary server (skip if {{ postgresql_pgdata }}/PG_VERSION exists)
  #command: . ~/.bash_profile && repmgr -h "{{ hostvars[groups['pgmaster'][0]]['ansible_all_ipv4_addresses']|first }}" --port={{ postgresql_port }} -U repmgr -d repmgr -D "{{ postgresql_pgdata }}" -f /etc/repmgr.conf standby clone
  shell: . ~/.bash_profile && repmgr -h "{{ hostvars[groups['pgmaster'][0]]['ansible_all_ipv4_addresses']|first }}" --port={{ postgresql_port }} -U repmgr -d repmgr -D "{{ postgresql_pgdata }}" -f /etc/repmgr.conf standby clone
#  when: "'pgslave' in group_names"
  when: 
    - not pgdata_dir_version.stat.exists
    - "'pgslave' in group_names"
    - skip_host is not defined
  become: yes
  become_user: "{{ postgresql_user }}"
  register: out
  #repmgr -h 10.12.94.31 --port=6543 -U repmgr -d repmgr -D /pg_data/11 -f /etc/repmgr.conf standby clone

- name: restart postgresql
  service: 
    name: "postgresql-{{postgresql_version}}.service"
    state: restarted    
  when: 
    - "'pgslave' in group_names"
    - skip_host is not defined
  
- name: repmgr standby register
  shell: . ~/.bash_profile && repmgr standby register --force
  when: 
    - "'pgslave' in group_names"
    - skip_host is not defined
  #tags: [ tested ]
  become: yes
  become_user: "{{ postgresql_user }}"
  
#- debug: var=out.stdout_lines

- include: exchange_ssh_keys.yml     
  when: skip_host is not defined 
      
- include: repmgrd.yml      